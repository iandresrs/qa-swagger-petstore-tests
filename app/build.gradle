buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // Plugin to generate Serenity reports in single-page HTML format (version 4.2.0)
        classpath "net.serenity-bdd:serenity-single-page-report:4.2.0"
    }
}

plugins {
    // Official Serenity plugin for Gradle (version 4.1.3)
    id "net.serenity-bdd.serenity-gradle-plugin" version "4.1.3"
    
    // Standard Java plugin for compiling and running Java code
    id 'java'
}

group 'io.petstore.swagger'   // Group identifier for artifacts
version '1.0-SNAPSHOT'        // Project version

java {
    // Java version used to compile and run the project (Java 11)
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(JavaCompile) {
    // UTF-8 encoding to avoid issues with special characters in the source code
    options.encoding = "UTF-8"
}

repositories {
    // Maven Central repository to download dependencies
    mavenCentral()
}

ext {
    // Variables holding specific versions for Serenity libraries
    serenityCore           = "3.7.1"
    serenityJunit5         = "3.3.2"
    serenityCucumber       = "3.7.1"
    serenityScreenplayRest = "3.7.1"
    lombokVersion = '1.18.34'
}

dependencies {
    // Main Serenity BDD core dependency
    implementation "net.serenity-bdd:serenity-core:${serenityCore}"
    
    // Serenity integration with JUnit 5 for running tests
    implementation 'net.serenity-bdd:serenity-junit5:3.3.2'
    
    // Serenity integration with Cucumber for BDD
    implementation "net.serenity-bdd:serenity-cucumber:${serenityCucumber}"
    
    // Library for REST testing using the Screenplay pattern with Serenity
    implementation "net.serenity-bdd:serenity-screenplay-rest:${serenityScreenplayRest}"

    // Apache POI for handling Excel files (.xls and .xlsx)
    implementation 'org.apache.poi:poi:5.3.0'
    implementation 'org.apache.poi:poi-ooxml:5.3.0'

    // Simple logging implementation for SLF4J
    implementation 'org.slf4j:slf4j-simple:2.0.13'
    
    // Log4j core, another logging framework for projects needing advanced features
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'

    // Library for easily testing REST services
    implementation 'io.rest-assured:rest-assured:5.5.5'

    // Library for fluent and advanced assertions in tests
    implementation 'org.assertj:assertj-core:3.27.3'

    // Lombok - Reduces boilerplate code like getters, setters, and constructors
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

test {
    // Configure Gradle to run tests using JUnit Platform (compatible with JUnit 5)
    useJUnitPlatform()
}

serenity {
    // Root package where Serenity runner classes are located for test discovery
    testRoot = "io.petstore.swagger"

    // Base folder containing Cucumber feature files (BDD)
    requirementsBaseDir = ["src/test/resources/features/"]

    // Type of report to generate, here a single-page HTML report
    reports = ["single-page-html"]
}

// Allows Gradle to continue execution even if a task (test) fails
gradle.startParameter.continueOnFailure = true

// Defines default tasks to run when Gradle is executed without arguments
defaultTasks 'clean', 'test', 'aggregate'

// Ensures that the 'aggregate' task (which generates consolidated reports) runs after tests finish
test.finalizedBy(aggregate)
